# GPIO0 	LED outside case
# GPIO4 	Red
# GPIO5 	Laser
# GPIO12 	Green
# GPIO13 	Motor
# GPIO14 	Blue
# GPIO15 	LED outside case
# GPIO16 	Button

substitutions:
  name: nebula-projector
  friendly_name: Nebula projector

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ESP8266 Nebula projector
  name_add_mac_suffix: true
  project:
    name: ishioni.nebula_projector
    version: "2.1"

esp8266:
  board: esp12e
  early_pin_init: false
  restore_from_flash: false

api:

captive_portal:

dashboard_import:
  package_import_url: github://ishioni/esphome/nebula-projector/nebula-projector-template.yaml@feat/nebula-effects

logger:
  
ota:
  platform: esphome

web_server:
  port: 80

wifi:
  ap:

binary_sensor:
  - platform: status
    device_class: connectivity
    name: Status
  - platform: gpio
    id: button_sensor
    pin: &button
      number: GPIO16
      mode: 
        input: true
        pulldown: true
      inverted: true
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: LED toggle
          - light.toggle: rgb_light
      - timing: # LED for power off
          - ON for at least 2s
        then:
          - light.turn_on:
              id: status_combined_led
              effect: Slow blink
      - timing: # Power off
          - ON for 2s to 5s
          - OFF for at least 0.2s
        then:
          - logger.log: LED off
          - light.turn_off: rgb_light
          - light.turn_off: status_combined_led
      - timing: # LED for reboot
          - ON for at least 5s
        then:
          - light.turn_on:
              id: status_combined_led
              effect: Fast blink
      - timing: # Reboot
          - ON for 5s to 29s
        then:
          - logger.log: Reboot
          - button.press: button_reboot
      - timing: # LED for factory reset
          - ON for at least 30s
        then:
          - light.turn_on:
              id: status_combined_led
              effect: none
      - timing: # Factory reset
          - ON for at least 30s
          - OFF for at least 0.2s
        then:
          - logger.log: Factory reset
          - light.turn_off:
              id: status_combined_led
          - logger.log: FACTORY RESET
          - button.press: button_factory_reset

button:
  - platform: restart
    id: button_reboot
    name: Reboot
  - platform: factory_reset
    id: button_factory_reset

light:
  - platform: status_led
    id: status_combined_led
    output: status_gpio
    effects:
      - strobe:
          name: Slow blink
          colors:
            - state: true
              brightness: 100%
              duration: 500ms
            - state: false
              duration: 500ms
      - strobe:
          name: Fast blink
          colors:
            - state: true
              brightness: 100%
              duration: 150ms
            - state: false
              duration: 150ms
  - platform: rgb
    name: Nebula light
    id: rgb_light
    icon: mdi:projector
    red: red_gpio
    green: green_gpio
    blue: blue_gpio
    restore_mode: ALWAYS_OFF
    effects:
      - random:
          name: Random
          transition_length: 2.5s
          update_interval: 5s
      - random:
          name: Slow Random
          transition_length: 15s
          update_interval: 30s
    on_turn_on:
      - if: # Consider the motor
          condition:
            - lambda: return id(motor_speed).state >= 1;
          then:
            - servo.write:
                id: motor_servo
                level: !lambda return id(motor_speed).state * (1.0f / 6.0f);
    on_turn_off:
      - servo.write: 
          id: motor_servo
          level: 0.0 # Turn of the motor
      - light.turn_off: laser_light
    on_state:
      - if:
          condition:
            - lambda: return id(laser_switch).state;
          then:
            - delay: 1s
            - light.control:
                id: laser_light
                state: !lambda return id(rgb_light).current_values.is_on();
                brightness: !lambda return id(rgb_light).current_values.get_brightness();
  - platform: monochromatic
    id: laser_light
    output: laser_gpio
    restore_mode: ALWAYS_OFF

sensor:
  - platform: wifi_signal
    id: wifi_signal_db
    update_interval: 10s
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi signal"
    icon: mdi:wifi-strength-1
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""
  - platform: uptime
    name: Uptime
    entity_category: "diagnostic"
  - platform: adc
    pin: VCC
    name: "VCC Voltage"
    entity_category: "diagnostic"
    device_class: "voltage"

servo:
  - id: motor_servo
    output: motor_gpio
    max_level: 100%

switch:
  - platform: template
    id: laser_switch
    name: Laser
    icon: mdi:laser-pointer
    optimistic: true
    entity_category: config
    turn_on_action:
      - if:
          condition:
            - lambda: return id(rgb_light).current_values.is_on();
          then:
            - light.control:
                id: laser_light
                state: !lambda return id(rgb_light).current_values.is_on();
                brightness: !lambda return id(rgb_light).current_values.get_brightness();
    turn_off_action:
      - if:
          condition:
            - lambda: return id(rgb_light).current_values.is_on();
          then:
            - light.turn_off: laser_light

number:
  - platform: template
    id: motor_speed
    name: Motor speed
    icon: mdi:cog-clockwise
    entity_category: config
    optimistic: true
    restore_value: true
    step: 1
    max_value: 6
    min_value: 0
    initial_value: 3
    set_action:
      - if:
          condition:
            - light.is_on: rgb_light
          then:
            - servo.write:
                id: motor_servo
                level: !lambda return x * (1.0f / 6.0f);

output:
  - platform: esp8266_pwm
    id: red_gpio
    pin: GPIO4
    inverted: true
    min_power: 0.1
    zero_means_zero: true
  - platform: esp8266_pwm
    id: green_gpio
    pin: GPIO12
    inverted: true
    min_power: 0.1
    zero_means_zero: true
  - platform: esp8266_pwm
    id: blue_gpio
    pin: GPIO14
    inverted: true
    min_power: 0.1
    zero_means_zero: true
  - platform: esp8266_pwm
    id: laser_gpio
    pin: GPIO5
    min_power: 0.1
    max_power: 0.8
    zero_means_zero: true
    frequency: 2000 Hz
    inverted: true
  - platform: esp8266_pwm
    id: motor_gpio
    pin: GPIO13
    frequency: 8Hz
    # min_power: 0.15
  - platform: template
    id: status_gpio
    type: binary
    write_action:
      - if:
          condition:
            lambda: "return state;"
          then:
            - output.turn_on: status_horizontal_gpio
            - output.turn_on: status_vertical_gpio
          else:
            - output.turn_off: status_horizontal_gpio
            - output.turn_off: status_vertical_gpio
  - platform: gpio
    id: status_horizontal_gpio
    pin: GPIO0
    inverted: true
  - platform: gpio
    id: status_vertical_gpio
    pin: GPIO15
    inverted: true

