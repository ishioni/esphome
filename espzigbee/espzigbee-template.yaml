substitutions:
  name: espzigbee
  friendly_name: ESP-Zigbee

#based on https://github.com/ficueu/ESP-POE-ZB
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ESP-based zigbee coordinator
  name_add_mac_suffix: true
  project:
    name: ishioni.espzigbee
    version: "2.0"
  on_boot:
    - priority: 250
      then:
        - script.execute: 
            id: zigbee_reset_script
            publish_state: true
        - light.turn_on:
            id: status_led

esp32:
  board: esp32dev

api:

dashboard_import:
  package_import_url: github://ishioni/esphome/espzigbee/espzigbee-template.yaml@espzigbee-v2.0

external_components:
  - source: github://oxan/esphome-stream-server

logger:

ota:
  platform: esphome

web_server:
  port: 80

binary_sensor:
  - platform: status
    device_class: connectivity
    name: Status
  - platform: stream_server
    connected:
      name: Zigbee connected

button:
  - platform: restart
    name: Reboot
  - platform: template
    name: Zigbee reboot
    entity_category: config
    device_class: restart
    id: zigbee_reset
    on_press:
      - script.execute: 
          id: zigbee_reset_script
          publish_state: true
  - platform: template
    name: Zigbee update
    entity_category: config
    device_class: update
    id: zigbee_update
    on_press:
      - script.execute: zigbee_update_script

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 1
  power_pin: GPIO12

light:
  - platform: monochromatic
    id: status_led
    output: led_out
    effects:
      - pulse:

one_wire:
  - platform: gpio
    pin: GPIO16

output:
  - platform: ledc
    id: led_out
    pin: GPIO2
    inverted: true

sensor:
  - platform: uptime
    name: Uptime
    entity_category: "diagnostic"

script:
  - id: zigbee_reset_script
    parameters:
      publish_state: bool
    then:
      - switch.turn_on: zigbee_reset_switch
      - light.turn_off:
          id: status_led
      - if:
          condition:
            lambda: 'return publish_state;'
          then:
            - text_sensor.template.publish:
                id: zigbee_state
                state: Rebooting
      - delay: 1s
      - switch.turn_off: zigbee_reset_switch
      - logger.log: "Zigbee reset"
      - light.turn_on:
          id: status_led
      - if:
          condition:
            lambda: 'return publish_state;'
          then:
            - text_sensor.template.publish:
                id: zigbee_state
                state: Coordinator
  - id: zigbee_update_script
    then:
      - switch.turn_on: zigbee_bsl_switch
      - delay: 1s
      - script.execute:
          id: zigbee_reset_script
          publish_state: false
      - logger.log: "Delaying ~10 seconds for TI chip to be ready"
      - delay: 10s
      - switch.turn_off: zigbee_bsl_switch
      - light.turn_on:
          id: status_led
          effect: pulse    
      - logger.log: "Update with cc2538-bsl tool now!"
      - logger.log: "Usage: cc2538-bsl.py -p socket://ip_or_hostname:6638 -evw firmware.hex"
      - text_sensor.template.publish:
          id: zigbee_state
          state: Upgrade

stream_server:
  uart_id: uart_bus
  buffer_size: 2048
  port: 6638

switch:
  - platform: gpio
    pin: GPIO32
    id: zigbee_reset_switch
    inverted: yes
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin: GPIO33
    id: zigbee_bsl_switch
    inverted: yes
    restore_mode: ALWAYS_OFF

text_sensor:
  - platform: template
    name: Zigbee state
    id: zigbee_state

uart:
  id: uart_bus
  rx_pin: GPIO4
  tx_pin: GPIO5
  baud_rate: 115200
  rx_buffer_size: 2048
